const fs = require('fs');
const bunyan = require('bunyan');

const omitKeys = new Set(['name', 'hostname', 'component', 'msg']);

const logNames = {
  60: { name: 'FATAL', color: [ 7, 27] },
  50: { name: 'ERROR', color: [31, 39] },
  40: { name: ' WARN', color: [35, 39] },
  30: { name: ' INFO', color: [36, 39] },
  20: { name: 'DEBUG', color: [33, 39] },
  10: { name: 'TRACE', color: [37, 39] },
};

function colorize(str, colors) {
  if (!colors) return str;
  const [start, end] = colors;
  return `\x1b[${start}m${str}\x1b[${end}m`;
}

function getReqUrl(req) {
  return (req && req.url) ? `\nurl: ${req.url}` : '';
}

function getErrMsg(err) {
  return err ? `\n${err.stack || err}` : '';
}

class ConsoleStream {
  constructor() {
    const level = parseInt(process.env['BALDERA_LOG_LEVEL'], 10);
    const colors = parseInt(process.env['BALDERA_LOG_COLORS'], 10);

    this.level = (!isNaN(level) ? level : 0);
    this.colors = !!(!isNaN(colors) ? colors : process.stdout.isTTY);
  }

  write(rec) {
    if (rec.level < this._level) return;
    if (this._filter && this._filter.has(rec.component) && rec.level === bunyan.WARN) return;

    const level = logNames[rec.level] || { name: `LVL${rec.level}` };

    const extras = Object.keys(rec)
      .filter(key => !omitKeys.has(key) && typeof rec[key] === 'string' && rec[key].length < 30)
      .map(key => `${key} = ${rec[key]}`);

    const extrasStr = (extras.length > 0)
      ? ` (${extras.join(', ')})`
      : '';

    console.log('[%s] %s %s: %s',
      rec.time.toTimeString().replace(/ \(.+\)$/, ''),
      colorize(level.name, this.colors && level.color),
      rec.component,
      [
        colorize(rec.msg, this.colors && [36, 39]),
        extrasStr,
        getReqUrl(rec.req),
        getErrMsg(rec.err),
      ].join('')
    );
  }

  get level() {
    return this._balderaLevel;
  }

  set level(level) {
    level = +level;
    if (level < -2) level = -2;
    if (level > 3) level = 3;

    this._balderaLevel = level;

    this._level = {
      '-2': bunyan.ERROR,
      '-1': bunyan.WARN,
      '0': bunyan.INFO,
      '1': bunyan.INFO,
      '2': bunyan.DEBUG,
      '3': bunyan.TRACE,
    }[level] || bunyan.INFO;

    this._filter = (level < 1)
      ? new Set(['tera-data-parser', 'tera-proxy-game'])
      : null;
  }
}

const logger = bunyan.createLogger({
  name: 'baldera',
  streams: [{
    name: 'console',
    level: 0,
    stream: new ConsoleStream(),
    type: 'raw',
  }],
  serializers: bunyan.stdSerializers,
});

function BalderaLogger(name) {
  return logger.child({ component: name }, true);
}

Object.defineProperty(BalderaLogger, 'parent', {
  configurable: false,
  enumerable: true,
  writable: false,
  value: logger,
});

module.exports = BalderaLogger;
